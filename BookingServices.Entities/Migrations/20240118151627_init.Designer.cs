// <auto-generated />
using System;
using BookingServices.Entities.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookingServices.Entities.Migrations;

[DbContext(typeof(BookingDbContext))]
[Migration("20240118151627_init")]
partial class init
{
    /// <inheritdoc />
    protected override void BuildTargetModel(ModelBuilder modelBuilder)
    {
#pragma warning disable 612, 618
        modelBuilder
            .HasAnnotation("ProductVersion", "8.0.0")
            .HasAnnotation("Relational:MaxIdentifierLength", 64);

        modelBuilder.Entity("BookingServices.Entities.Entities.BookingMenu", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("char(36)");

                b.Property<Guid>("BookingId")
                    .HasColumnType("char(36)");

                b.Property<Guid>("CreatedBy")
                    .HasColumnType("char(36)");

                b.Property<DateTime>("CreatedDate")
                    .HasColumnType("datetime(6)");

                b.Property<bool>("IsDeleted")
                    .HasColumnType("tinyint(1)");

                b.Property<Guid>("MenuId")
                    .HasColumnType("char(36)");

                b.Property<Guid?>("ModifiedBy")
                    .HasColumnType("char(36)");

                b.Property<DateTime?>("ModifiedDate")
                    .HasColumnType("datetime(6)");

                b.Property<double>("Quantity")
                    .HasColumnType("double");

                b.Property<string>("SpecialRequest")
                    .HasColumnType("longtext");

                b.HasKey("Id");

                b.HasIndex("MenuId");

                b.ToTable("BookingMenu");
            });

        modelBuilder.Entity("BookingServices.Entities.Entities.Bookings", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("char(36)");

                b.Property<DateTime>("BookingDate")
                    .HasColumnType("datetime(6)");

                b.Property<int>("BookingStatusId")
                    .HasColumnType("int");

                b.Property<Guid>("CreatedBy")
                    .HasColumnType("char(36)");

                b.Property<DateTime>("CreatedDate")
                    .HasColumnType("datetime(6)");

                b.Property<Guid>("CustomerId")
                    .HasColumnType("char(36)");

                b.Property<bool>("IsDeleted")
                    .HasColumnType("tinyint(1)");

                b.Property<Guid?>("ModifiedBy")
                    .HasColumnType("char(36)");

                b.Property<DateTime?>("ModifiedDate")
                    .HasColumnType("datetime(6)");

                b.Property<int>("NumberOfPeople")
                    .HasColumnType("int");

                b.Property<Guid>("TableId")
                    .HasColumnType("char(36)");

                b.HasKey("Id");

                b.HasIndex("CustomerId");

                b.HasIndex("TableId");

                b.ToTable("Bookings");
            });

        modelBuilder.Entity("BookingServices.Entities.Entities.Customers", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("char(36)");

                b.Property<Guid>("CreatedBy")
                    .HasColumnType("char(36)");

                b.Property<DateTime>("CreatedDate")
                    .HasColumnType("datetime(6)");

                b.Property<DateTime?>("DateOfBirth")
                    .HasColumnType("datetime(6)");

                b.Property<string>("Email")
                    .IsRequired()
                    .HasColumnType("longtext");

                b.Property<int>("Gender")
                    .HasColumnType("int");

                b.Property<bool>("IsDeleted")
                    .HasColumnType("tinyint(1)");

                b.Property<Guid?>("ModifiedBy")
                    .HasColumnType("char(36)");

                b.Property<DateTime?>("ModifiedDate")
                    .HasColumnType("datetime(6)");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("longtext");

                b.Property<string>("PhoneNumber")
                    .HasColumnType("longtext");

                b.HasKey("Id");

                b.ToTable("Customers");
            });

        modelBuilder.Entity("BookingServices.Entities.Entities.MenuImages", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("char(36)");

                b.Property<Guid>("CreatedBy")
                    .HasColumnType("char(36)");

                b.Property<DateTime>("CreatedDate")
                    .HasColumnType("datetime(6)");

                b.Property<string>("ImageUrl")
                    .IsRequired()
                    .HasColumnType("longtext");

                b.Property<bool>("IsDeleted")
                    .HasColumnType("tinyint(1)");

                b.Property<Guid>("MenuId")
                    .HasColumnType("char(36)");

                b.Property<Guid?>("ModifiedBy")
                    .HasColumnType("char(36)");

                b.Property<DateTime?>("ModifiedDate")
                    .HasColumnType("datetime(6)");

                b.HasKey("Id");

                b.HasIndex("MenuId");

                b.ToTable("MenuImages");
            });

        modelBuilder.Entity("BookingServices.Entities.Entities.Others.EntityHistories", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("char(36)");

                b.Property<string>("Action")
                    .IsRequired()
                    .HasColumnType("longtext");

                b.Property<string>("ActionBy")
                    .IsRequired()
                    .HasColumnType("longtext");

                b.Property<DateTime>("ActionDate")
                    .HasColumnType("datetime(6)");

                b.Property<string>("EntityChangeData")
                    .IsRequired()
                    .HasColumnType("longtext");

                b.Property<string>("EntityId")
                    .HasColumnType("longtext");

                b.Property<string>("EntityName")
                    .IsRequired()
                    .HasColumnType("longtext");

                b.Property<string>("RequestId")
                    .HasColumnType("longtext");

                b.HasKey("Id");

                b.ToTable("EntityHistories");
            });

        modelBuilder.Entity("BookingServices.Entities.Entities.Others.Stogares", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("char(36)");

                b.Property<Guid>("CreatedBy")
                    .HasColumnType("char(36)");

                b.Property<DateTime>("CreatedDate")
                    .HasColumnType("datetime(6)");

                b.Property<Guid?>("ModifiedBy")
                    .HasColumnType("char(36)");

                b.Property<DateTime?>("ModifiedDate")
                    .HasColumnType("datetime(6)");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("longtext");

                b.Property<string>("Url")
                    .IsRequired()
                    .HasColumnType("longtext");

                b.HasKey("Id");

                b.ToTable("Stogares");
            });

        modelBuilder.Entity("BookingServices.Entities.Entities.RestaurantFloors", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("char(36)");

                b.Property<int>("Capacity")
                    .HasColumnType("int");

                b.Property<Guid>("CreatedBy")
                    .HasColumnType("char(36)");

                b.Property<DateTime>("CreatedDate")
                    .HasColumnType("datetime(6)");

                b.Property<string>("ExtensionData")
                    .HasColumnType("longtext");

                b.Property<int>("FloorNumber")
                    .HasColumnType("int");

                b.Property<bool>("IsDeleted")
                    .HasColumnType("tinyint(1)");

                b.Property<string>("LayoutUrl")
                    .HasColumnType("longtext");

                b.Property<Guid?>("ModifiedBy")
                    .HasColumnType("char(36)");

                b.Property<DateTime?>("ModifiedDate")
                    .HasColumnType("datetime(6)");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("longtext");

                b.Property<Guid>("RestaurantId")
                    .HasColumnType("char(36)");

                b.HasKey("Id");

                b.HasIndex("RestaurantId");

                b.ToTable("RestaurantFloors");
            });

        modelBuilder.Entity("BookingServices.Entities.Entities.RestaurantImages", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("char(36)");

                b.Property<Guid>("CreatedBy")
                    .HasColumnType("char(36)");

                b.Property<DateTime>("CreatedDate")
                    .HasColumnType("datetime(6)");

                b.Property<string>("Description")
                    .IsRequired()
                    .HasColumnType("longtext");

                b.Property<Guid?>("ModifiedBy")
                    .HasColumnType("char(36)");

                b.Property<DateTime?>("ModifiedDate")
                    .HasColumnType("datetime(6)");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("longtext");

                b.Property<Guid>("RestaurantId")
                    .HasColumnType("char(36)");

                b.Property<string>("Url")
                    .IsRequired()
                    .HasColumnType("longtext");

                b.HasKey("Id");

                b.HasIndex("RestaurantId");

                b.ToTable("RestaurantImages");
            });

        modelBuilder.Entity("BookingServices.Entities.Entities.RestaurantInformation", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("char(36)");

                b.Property<TimeOnly>("CloseTime")
                    .HasColumnType("time(6)");

                b.Property<Guid>("CreatedBy")
                    .HasColumnType("char(36)");

                b.Property<DateTime>("CreatedDate")
                    .HasColumnType("datetime(6)");

                b.Property<string>("Email")
                    .HasColumnType("longtext");

                b.Property<string>("ExtensionData")
                    .HasColumnType("longtext");

                b.Property<bool>("IsDeleted")
                    .HasColumnType("tinyint(1)");

                b.Property<Guid?>("ModifiedBy")
                    .HasColumnType("char(36)");

                b.Property<DateTime?>("ModifiedDate")
                    .HasColumnType("datetime(6)");

                b.Property<TimeOnly>("OpenTime")
                    .HasColumnType("time(6)");

                b.Property<string>("PhoneNumber")
                    .HasColumnType("longtext");

                b.Property<string>("RestaurantName")
                    .IsRequired()
                    .HasColumnType("longtext");

                b.Property<string>("Website")
                    .HasColumnType("longtext");

                b.HasKey("Id");

                b.ToTable("RestaurantInformation");
            });

        modelBuilder.Entity("BookingServices.Entities.Entities.RestaurantMenu", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("char(36)");

                b.Property<Guid>("CreatedBy")
                    .HasColumnType("char(36)");

                b.Property<DateTime>("CreatedDate")
                    .HasColumnType("datetime(6)");

                b.Property<string>("Description")
                    .IsRequired()
                    .HasColumnType("longtext");

                b.Property<bool>("IsDeleted")
                    .HasColumnType("tinyint(1)");

                b.Property<int>("MenuType")
                    .HasColumnType("int");

                b.Property<Guid?>("ModifiedBy")
                    .HasColumnType("char(36)");

                b.Property<DateTime?>("ModifiedDate")
                    .HasColumnType("datetime(6)");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("longtext");

                b.Property<decimal>("Price")
                    .HasColumnType("decimal(65,30)");

                b.Property<int>("UnitType")
                    .HasColumnType("int");

                b.HasKey("Id");

                b.ToTable("RestaurantMenu");
            });

        modelBuilder.Entity("BookingServices.Entities.Entities.Restaurants", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("char(36)");

                b.Property<string>("Address")
                    .IsRequired()
                    .HasColumnType("longtext");

                b.Property<int>("Capacity")
                    .HasColumnType("int");

                b.Property<string>("CloseHours")
                    .HasColumnType("longtext");

                b.Property<Guid>("CreatedBy")
                    .HasColumnType("char(36)");

                b.Property<DateTime>("CreatedDate")
                    .HasColumnType("datetime(6)");

                b.Property<string>("Greetings")
                    .HasColumnType("longtext");

                b.Property<bool>("IsDeleted")
                    .HasColumnType("tinyint(1)");

                b.Property<string>("Location")
                    .IsRequired()
                    .HasColumnType("longtext");

                b.Property<Guid?>("ModifiedBy")
                    .HasColumnType("char(36)");

                b.Property<DateTime?>("ModifiedDate")
                    .HasColumnType("datetime(6)");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("longtext");

                b.Property<string>("OpenHours")
                    .HasColumnType("longtext");

                b.Property<string>("PhoneNumber")
                    .HasColumnType("longtext");

                b.Property<decimal?>("Rating")
                    .HasColumnType("decimal(18,2)");

                b.Property<int>("TotalFloors")
                    .HasColumnType("int");

                b.HasKey("Id");

                b.ToTable("Restaurants");
            });

        modelBuilder.Entity("BookingServices.Entities.Entities.Tables", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("char(36)");

                b.Property<int>("Capacity")
                    .HasColumnType("int");

                b.Property<Guid>("CreatedBy")
                    .HasColumnType("char(36)");

                b.Property<DateTime>("CreatedDate")
                    .HasColumnType("datetime(6)");

                b.Property<string>("ExtensionData")
                    .IsRequired()
                    .HasColumnType("longtext");

                b.Property<bool>("IsDeleted")
                    .HasColumnType("tinyint(1)");

                b.Property<Guid?>("ModifiedBy")
                    .HasColumnType("char(36)");

                b.Property<DateTime?>("ModifiedDate")
                    .HasColumnType("datetime(6)");

                b.Property<Guid>("RestaurantFloorId")
                    .HasColumnType("char(36)");

                b.Property<string>("TableName")
                    .IsRequired()
                    .HasColumnType("longtext");

                b.Property<int>("TableType")
                    .HasColumnType("int");

                b.HasKey("Id");

                b.HasIndex("RestaurantFloorId");

                b.ToTable("Tables");
            });

        modelBuilder.Entity("BookingServices.Entities.Entities.Users", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("char(36)");

                b.Property<Guid>("CreatedBy")
                    .HasColumnType("char(36)");

                b.Property<DateTime>("CreatedDate")
                    .HasColumnType("datetime(6)");

                b.Property<Guid?>("CustomerId")
                    .HasColumnType("char(36)");

                b.Property<bool>("IsDeleted")
                    .HasColumnType("tinyint(1)");

                b.Property<Guid?>("ModifiedBy")
                    .HasColumnType("char(36)");

                b.Property<DateTime?>("ModifiedDate")
                    .HasColumnType("datetime(6)");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("longtext");

                b.Property<string>("Password")
                    .IsRequired()
                    .HasColumnType("longtext");

                b.Property<int>("Role")
                    .HasColumnType("int");

                b.Property<string>("Username")
                    .IsRequired()
                    .HasColumnType("varchar(255)");

                b.HasKey("Id");

                b.HasIndex("CustomerId")
                    .IsUnique()
                    .HasFilter("[Role] = 4");

                b.HasIndex("Username")
                    .IsUnique();

                b.ToTable("Users");

                b.HasData(
                    new
                    {
                        Id = new Guid("d92f7769-9b46-4ca2-ae0a-65db5f252d38"),
                        CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                        CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                        IsDeleted = false,
                        Name = "Admin",
                        Password = "ZGfqUOXTHwDeWoWHPpRMMZmQ86Vd3vP9FsMhleKz25o+b6q3L4S1zt3NnG9GHxdZ",
                        Role = 1,
                        Username = "admin"
                    },
                    new
                    {
                        Id = new Guid("8c23b938-5af9-4489-9092-a0c6bfc821cc"),
                        CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                        CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                        IsDeleted = false,
                        Name = "Manager",
                        Password = "m2AQlpYuW9oLoqg5mrXQlAXaRBbIqHJEhABqdPUCegWS/7C0G/P7wPnql3P3ZWLT",
                        Role = 2,
                        Username = "manager"
                    },
                    new
                    {
                        Id = new Guid("dc05f216-6ca1-4014-93d2-67bb9e023c8f"),
                        CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                        CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                        IsDeleted = false,
                        Name = "Staff",
                        Password = "tH/VjwGkqTKEaqphXEn9HV+f86ICTs91PjDjmtE76KNqpl3f0WI7rVPaOi25VGFo",
                        Role = 3,
                        Username = "staff"
                    },
                    new
                    {
                        Id = new Guid("99e6bb8d-60ba-4cf9-affb-0efb2f64f30b"),
                        CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                        CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                        IsDeleted = false,
                        Name = "Customer",
                        Password = "Qfs2EJ+a+g0KHvfwiokptqCwHW6A8JzUR6savS3YX4EQ6MHXf6BD1ynDOIp2BppJ",
                        Role = 4,
                        Username = "customer"
                    });
            });

        modelBuilder.Entity("BookingServices.Entities.Entities.BookingMenu", b =>
            {
                b.HasOne("BookingServices.Entities.Entities.Bookings", "Booking")
                    .WithMany("BookingMenu")
                    .HasForeignKey("MenuId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("BookingServices.Entities.Entities.RestaurantMenu", "RestaurantMenu")
                    .WithMany("BookingMenu")
                    .HasForeignKey("MenuId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Booking");

                b.Navigation("RestaurantMenu");
            });

        modelBuilder.Entity("BookingServices.Entities.Entities.Bookings", b =>
            {
                b.HasOne("BookingServices.Entities.Entities.Customers", "Customer")
                    .WithMany()
                    .HasForeignKey("CustomerId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("BookingServices.Entities.Entities.Tables", "Table")
                    .WithMany("Bookings")
                    .HasForeignKey("TableId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Customer");

                b.Navigation("Table");
            });

        modelBuilder.Entity("BookingServices.Entities.Entities.MenuImages", b =>
            {
                b.HasOne("BookingServices.Entities.Entities.RestaurantMenu", "RestaurantMenu")
                    .WithMany("MenuImages")
                    .HasForeignKey("MenuId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("RestaurantMenu");
            });

        modelBuilder.Entity("BookingServices.Entities.Entities.RestaurantFloors", b =>
            {
                b.HasOne("BookingServices.Entities.Entities.Restaurants", "Restaurant")
                    .WithMany("RestaurantFloors")
                    .HasForeignKey("RestaurantId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Restaurant");
            });

        modelBuilder.Entity("BookingServices.Entities.Entities.RestaurantImages", b =>
            {
                b.HasOne("BookingServices.Entities.Entities.Restaurants", "Restaurants")
                    .WithMany("RestaurantImages")
                    .HasForeignKey("RestaurantId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Restaurants");
            });

        modelBuilder.Entity("BookingServices.Entities.Entities.Tables", b =>
            {
                b.HasOne("BookingServices.Entities.Entities.RestaurantFloors", "RestaurantFloor")
                    .WithMany("Tables")
                    .HasForeignKey("RestaurantFloorId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("RestaurantFloor");
            });

        modelBuilder.Entity("BookingServices.Entities.Entities.Users", b =>
            {
                b.HasOne("BookingServices.Entities.Entities.Customers", "Customer")
                    .WithOne("User")
                    .HasForeignKey("BookingServices.Entities.Entities.Users", "CustomerId");

                b.Navigation("Customer");
            });

        modelBuilder.Entity("BookingServices.Entities.Entities.Bookings", b =>
            {
                b.Navigation("BookingMenu");
            });

        modelBuilder.Entity("BookingServices.Entities.Entities.Customers", b =>
            {
                b.Navigation("User")
                    .IsRequired();
            });

        modelBuilder.Entity("BookingServices.Entities.Entities.RestaurantFloors", b =>
            {
                b.Navigation("Tables");
            });

        modelBuilder.Entity("BookingServices.Entities.Entities.RestaurantMenu", b =>
            {
                b.Navigation("BookingMenu");

                b.Navigation("MenuImages");
            });

        modelBuilder.Entity("BookingServices.Entities.Entities.Restaurants", b =>
            {
                b.Navigation("RestaurantFloors");

                b.Navigation("RestaurantImages");
            });

        modelBuilder.Entity("BookingServices.Entities.Entities.Tables", b =>
            {
                b.Navigation("Bookings");
            });
#pragma warning restore 612, 618
    }
}
